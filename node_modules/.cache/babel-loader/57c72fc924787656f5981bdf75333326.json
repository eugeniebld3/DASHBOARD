{"ast":null,"code":"import _classCallCheck from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/lele/Desktop/Dash/app/src/Widgets/Chart1/Chart.js\";\nimport React from 'react';\nimport FusionCharts from 'fusioncharts';\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\nimport ReactFC from 'react-fusioncharts';\nimport 'chart.json';\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nvar jsonify = function jsonify(res) {\n  return res.json();\n};\n\nvar dataFetch = fetch('https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/fusiontime-beta-release/charts-resources/fusiontime/online-sales-single-series/data.json').then(jsonify);\nvar schemaFetch = fetch('https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/fusiontime-beta-release/charts-resources/fusiontime/online-sales-single-series/schema.json').then(jsonify);\n\nvar ChartViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChartViewer, _React$Component);\n\n  function ChartViewer(props) {\n    var _this;\n\n    _classCallCheck(this, ChartViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChartViewer).call(this, props));\n    _this.onFetchData = _this.onFetchData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: {\n            text: 'Online Sales of a SuperStore in the US'\n          },\n          data: null,\n          yAxis: [{\n            plot: [{\n              value: 'Sales ($)'\n            }]\n          }]\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ChartViewer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onFetchData();\n    }\n  }, {\n    key: \"onFetchData\",\n    value: function onFetchData() {\n      var _this2 = this;\n\n      Promise.all([dataFetch, schemaFetch]).then(function (res) {\n        var data = res[0];\n        var schema = res[1];\n        var fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n        var timeseriesDs = Object.assign({}, _this2.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n\n        _this2.setState({\n          timeseriesDs: timeseriesDs\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.state.timeseriesDs.dataSource.data ? React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })) : 'loading');\n    }\n  }]);\n\n  return ChartViewer;\n}(React.Component);\n\nexport default ChartViewer;","map":{"version":3,"sources":["/Users/lele/Desktop/Dash/app/src/Widgets/Chart1/Chart.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","ChartViewer","props","onFetchData","bind","state","timeseriesDs","type","renderAt","width","height","dataSource","caption","text","data","yAxis","plot","value","Promise","all","schema","fusionTable","DataStore","createDataTable","Object","assign","setState","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,YAAP;AAEAA,OAAO,CAACC,MAAR,CAAeH,YAAf,EAA6BC,UAA7B;;AAEA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,CAAnB;;AACA,IAAMC,SAAS,GAAGC,KAAK,CACrB,yJADqB,CAAL,CAEhBC,IAFgB,CAEXL,OAFW,CAAlB;AAGA,IAAMM,WAAW,GAAGF,KAAK,CACvB,2JADuB,CAAL,CAElBC,IAFkB,CAEbL,OAFa,CAApB;;IAIMO,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE,YADM;AAEZC,QAAAA,QAAQ,EAAE,WAFE;AAGZC,QAAAA,KAAK,EAAE,KAHK;AAIZC,QAAAA,MAAM,EAAE,KAJI;AAKZC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WADC;AAEVC,UAAAA,IAAI,EAAE,IAFI;AAGVC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,IAAI,EAAE,CACJ;AACEC,cAAAA,KAAK,EAAE;AADT,aADI;AADR,WADK;AAHG;AALA;AADH,KAAb;AAHiB;AAwBlB;;;;wCAEmB;AAClB,WAAKd,WAAL;AACD;;;kCAEa;AAAA;;AACZe,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACtB,SAAD,EAAYG,WAAZ,CAAZ,EAAsCD,IAAtC,CAA2C,UAAAJ,GAAG,EAAI;AAChD,YAAMmB,IAAI,GAAGnB,GAAG,CAAC,CAAD,CAAhB;AACA,YAAMyB,MAAM,GAAGzB,GAAG,CAAC,CAAD,CAAlB;AACA,YAAM0B,WAAW,GAAG,IAAI/B,YAAY,CAACgC,SAAjB,GAA6BC,eAA7B,CAClBT,IADkB,EAElBM,MAFkB,CAApB;AAIA,YAAMd,YAAY,GAAGkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAI,CAACpB,KAAL,CAAWC,YAA7B,CAArB;AACAA,QAAAA,YAAY,CAACK,UAAb,CAAwBG,IAAxB,GAA+BO,WAA/B;;AACA,QAAA,MAAI,CAACK,QAAL,CAAc;AACZpB,UAAAA,YAAY,EAAZA;AADY,SAAd;AAGD,OAZD;AAaD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWC,YAAX,CAAwBK,UAAxB,CAAmCG,IAAnC,GACC,oBAAC,OAAD,oBAAa,KAAKT,KAAL,CAAWC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD,GAGC,SAJJ,CADF;AASD;;;;EAzDuBjB,KAAK,CAACsC,S;;AA4DhC,eAAe1B,WAAf","sourcesContent":["import React from 'react';\nimport FusionCharts from 'fusioncharts';\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\nimport ReactFC from 'react-fusioncharts';\nimport 'chart.json';\n\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\nconst dataFetch = fetch(\n  'https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/fusiontime-beta-release/charts-resources/fusiontime/online-sales-single-series/data.json'\n).then(jsonify);\nconst schemaFetch = fetch(\n  'https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/fusiontime-beta-release/charts-resources/fusiontime/online-sales-single-series/schema.json'\n).then(jsonify);\n\nclass ChartViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onFetchData = this.onFetchData.bind(this);\n    this.state = {\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: { text: 'Online Sales of a SuperStore in the US' },\n          data: null,\n          yAxis: [\n            {\n              plot: [\n                {\n                  value: 'Sales ($)'\n                }\n              ]\n            }\n          ]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchData();\n  }\n\n  onFetchData() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(\n        data,\n        schema\n      );\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.timeseriesDs.dataSource.data ? (\n          <ReactFC {...this.state.timeseriesDs} />\n        ) : (\n          'loading'\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ChartViewer; "]},"metadata":{},"sourceType":"module"}