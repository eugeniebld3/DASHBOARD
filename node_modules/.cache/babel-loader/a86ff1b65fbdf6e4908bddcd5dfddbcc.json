{"ast":null,"code":"import _classCallCheck from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/lele/Desktop/Dash/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/lele/Desktop/Dash/app/src/Widgets/Chart1/Chart.js\";\nimport React, { Component } from 'react'; // Import fusioncharts.js files from fusioncharts module\n\nimport FusionCharts from 'fusioncharts'; // Import the timeseries file from fusioncharts module\n\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries'; // Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\n\nimport ReactFC from 'react-fusioncharts'; // Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\n\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nvar jsonify = function jsonify(res) {\n  return res.json();\n}; // This is the remote url to fetch the data.\n\n\nvar dataFetch = fetch('https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json').then(jsonify); // This is the remote url to fetch the schema.\n\nvar schemaFetch = fetch('https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/column-chart-with-time-axis-schema.json').then(jsonify);\n\nvar ColumnChartTimeAxis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColumnChartTimeAxis, _Component);\n\n  function ColumnChartTimeAxis(props) {\n    var _this;\n\n    _classCallCheck(this, ColumnChartTimeAxis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnChartTimeAxis).call(this, props));\n    _this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'Daily Visitors Count of a Website'\n          },\n          yAxis: [{\n            plot: {\n              value: 'Daily Visitors',\n              type: 'column'\n            },\n            title: 'Daily Visitors (in thousand)'\n          }],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    }; // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n\n    _this.createDataTable = _this.createDataTable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ColumnChartTimeAxis, [{\n    key: \"createDataTable\",\n    value: function createDataTable() {\n      var _this2 = this;\n\n      Promise.all([dataFetch, schemaFetch]).then(function (res) {\n        var data = res[0];\n        var schema = res[1]; // First we are creating a DataStore\n\n        var fusionDataStore = new FusionCharts.DataStore(); // After that we are creating a DataTable by passing our data and schema as arguments\n\n        var fusionTable = fusionDataStore.createDataTable(data, schema); // Afet that we simply mutated our timeseries datasource by attaching the above\n        // DataTable into its data property.\n\n        var timeseriesDs = Object.assign({}, _this2.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n\n        _this2.setState({\n          timeseriesDs: timeseriesDs\n        });\n      });\n    } // We are creating the DataTable immidietly after the component is mounted\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createDataTable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ColumnChartTimeAxis;\n}(Component);\n\nexport default ColumnChartTimeAxis;","map":{"version":3,"sources":["/Users/lele/Desktop/Dash/app/src/Widgets/Chart1/Chart.js"],"names":["React","Component","FusionCharts","TimeSeries","ReactFC","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","ColumnChartTimeAxis","props","state","timeseriesDs","type","renderAt","width","height","dataSource","chart","showLegend","caption","text","yAxis","plot","value","title","data","createDataTable","bind","Promise","all","schema","fusionDataStore","DataStore","fusionTable","Object","assign","setState"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,sCAAvB,C,CACA;AACA;;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;;AACAA,OAAO,CAACC,MAAR,CAAeH,YAAf,EAA6BC,UAA7B;;AAEA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,CAAnB,C,CACA;;;AACA,IAAMC,SAAS,GAAGC,KAAK,CACrB,kGADqB,CAAL,CAEhBC,IAFgB,CAEXL,OAFW,CAAlB,C,CAGA;;AACA,IAAMM,WAAW,GAAGF,KAAK,CACvB,sGADuB,CAAL,CAElBC,IAFkB,CAEbL,OAFa,CAApB;;IAIMO,mB;;;;;AACJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACX;AACAC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE,YADM;AAEZC,QAAAA,QAAQ,EAAE,WAFE;AAGZC,QAAAA,KAAK,EAAE,KAHK;AAIZC,QAAAA,MAAM,EAAE,KAJI;AAKZC,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAE;AACLC,YAAAA,UAAU,EAAE;AADP,WADG;AAIVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AADC,WAJC;AAOVC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,IAAI,EAAE;AACJC,cAAAA,KAAK,EAAE,gBADH;AAEJX,cAAAA,IAAI,EAAE;AAFF,aADR;AAKEY,YAAAA,KAAK,EAAE;AALT,WADK,CAPG;AAgBV;AACAC,UAAAA,IAAI,EAAE;AAjBI;AALA;AAFH,KAAb,CAFiB,CA+BjB;AACA;;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AAjCiB;AAkClB;;;;sCAEiB;AAAA;;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACzB,SAAD,EAAYG,WAAZ,CAAZ,EAAsCD,IAAtC,CAA2C,UAAAJ,GAAG,EAAI;AAChD,YAAMuB,IAAI,GAAGvB,GAAG,CAAC,CAAD,CAAhB;AACA,YAAM4B,MAAM,GAAG5B,GAAG,CAAC,CAAD,CAAlB,CAFgD,CAGhD;;AACA,YAAM6B,eAAe,GAAG,IAAIlC,YAAY,CAACmC,SAAjB,EAAxB,CAJgD,CAKhD;;AACA,YAAMC,WAAW,GAAGF,eAAe,CAACL,eAAhB,CAAgCD,IAAhC,EAAsCK,MAAtC,CAApB,CANgD,CAOhD;AACA;;AACA,YAAMnB,YAAY,GAAGuB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAI,CAACzB,KAAL,CAAWC,YAA7B,CAArB;AACAA,QAAAA,YAAY,CAACK,UAAb,CAAwBS,IAAxB,GAA+BQ,WAA/B;;AACA,QAAA,MAAI,CAACG,QAAL,CAAc;AACZzB,UAAAA,YAAY,EAAZA;AADY,SAAd;AAGD,OAdD;AAeD,K,CAED;;;;wCACoB;AAClB,WAAKe,eAAL;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD,oBAAa,KAAKhB,KAAL,CAAWC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;;;EAlE+Bf,S;;AAqElC,eAAeY,mBAAf","sourcesContent":["import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/column-chart-with-time-axis-schema.json'\n).then(jsonify);\n\nclass ColumnChartTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'Daily Visitors Count of a Website'\n          },\n          yAxis: [\n            {\n              plot: {\n                value: 'Daily Visitors',\n                type: 'column'\n              },\n              title: 'Daily Visitors (in thousand)'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default ColumnChartTimeAxis;\n"]},"metadata":{},"sourceType":"module"}